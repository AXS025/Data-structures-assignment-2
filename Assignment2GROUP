from collections import deque #Imports deque for queue implementations


class ListNode: #node class for linked list
    def __init__(self, data=None):
        self.data = data #data of the node
        self.next = None #pointer to next node
        self.prev = None #pointer to previous node


class LinkedList: #linked list class
    def __init__(self):
        self.start = None #start pointer of the linked list

    def add(self, value):
        new_item = ListNode(value) #creating a new node with the given value
        if not self.start:
            self.start = new_item #if list is empty the new item becomes the start
        else:
            iterator = self.start
            while iterator.next:
                iterator = iterator.next #goes throug till the end of the list
            iterator.next = new_item #adds new item in the end
            new_item.prev = iterator #updates previous pointer

    def rem(self, value):
        iterator = self.start
        while iterator:
            if iterator.data == value: #searchs for the node with given value
                if iterator.prev:
                    iterator.prev.next = iterator.next
                else:
                    self.start = iterator.next #if first node then update start pointer
                if iterator.next:
                    iterator.next.prev = iterator.prev
                return True #node found and removed
            iterator = iterator.next
        return False #node not found

    def __iter__(self):
        self.current = self.start #initializing the current pointer for iteration
        return self

    def __next__(self):
        if self.current:
            data = self.current.data  #gets data of current node
            self.current = self.current.next #moves to the next node
            return data  #returns data of current node
        self.current = None
        return None #returns None when iteration is done


class Patient: #patient class
    def __init__(self, id_of_patient, name, age, medical_history, condition, date_of_Admission): #constructor
        self.id_of_patient = id_of_patient #patient ID
        self.name = name #name
        self.age = age #age
        self.medical_history = medical_history #medical history
        self.condition = condition #condition
        self.date_of_Admission = date_of_Admission #date
        self.appointment = None #scheduled appointment
        self.prescriptions = [] #List of prescriptions for the patient

    def __str__(self): #string representaion
        return "ID: " + str(self.id_of_patient) + ", Name: " + self.name + ", Age: " + str(
            self.age) + ", Condition: " + self.condition + ", Date of Admission: " + str(self.date_of_Admission)


class Doctor: #Doctor class
    def __init__(self, id, name, specialization):
        self.id = id #doctor ID
        self.name = name #name
        self.specialization = specialization #doctor's specialization

    def __str__(self):
        return "ID: " + str(self.id) + ", Name: " + self.name + ", Specialization: " + self.specialization


class Prescription: #prescription class
    def __init__(self, patient_name, medication_name, store_name, dose, how_to_take, doctor_name):
        self.patient_name = patient_name #name of patient
        self.medication_name = medication_name #name of medication
        self.store_name = store_name #name of the store where medication is from
        self.dose = dose #dose of medicine
        self.how_to_take = how_to_take #instructions
        self.doctor_name = doctor_name #doctors name

    def __str__(self):
        return "Patient: " + self.patient_name + ", Medication: " + self.medication_name + ", Store: " + self.store_name + ", Dose: " + self.dose + ", Instructions: " + self.how_to_take + ", Doctor: " + self.doctor_name


class Hospital: #hospital class
    def __init__(self):
        self.patients_queue = deque() #queue for patients
        self.patient_records = LinkedList()  #linked list for patient records
        self.doctors = [] #list of doctors
        self.prescriptions_stack = [] #stack for prescriptions
        self.doctor_queues = {} #dictionary for doctor queues
        self.initialize_doctors() #initializing doctors

    def initialize_doctors(self): #initializing doctors with their IDs, names, and specializations
        doctors_info = [
            {"id": "Doc01", "name": "Dr. AlSuwaidi", "expertise": "Neurology"},
            {"id": "Doc02", "name": "Dr. Almansoori", "expertise": "Dermatology"},
            {"id": "Doc03", "name": "Dr. Alremeithi", "expertise": "Dentistry"},
            {"id": "Doc04", "name": "Dr. AlAmeri", "expertise": "Hematology"},
            {"id": "Doc05", "name": "Dr. AlZaabi", "expertise": "Psychiatry"}
        ] #list of dictionaties with the doctors info
        for doctor_info in doctors_info:
            doctor = Doctor(doctor_info["id"], doctor_info["name"], doctor_info["expertise"])
            self.doctors.append(doctor) #adds doctor to the list
            self.doctor_queues[doctor.id] = deque() #initializing doctor queues

    def add_patient(self, patient): #method to add patient to the hospital
        self.patient_records.add(patient) #adds patient to records
        self.patients_queue.append(patient) #adds patient to queue

    def edit_patient(self, id_of_patient, name, age, medical_history, condition, date_of_Admission): #method to edit patient details
        iterator = self.patient_records.start #start iterating from the beginning of patient records
        while iterator:
            if iterator.data.id_of_patient == id_of_patient: #if patient ID matches
                iterator.data.name = name #update patient name
                iterator.data.age = age #update patient age
                iterator.data.medical_history = medical_history #update patients medical history
                iterator.data.condition = condition #update patients condition
                iterator.data.date_of_Admission = date_of_Admission #updates data
                return True #updates successfully
            iterator = iterator.next
        return False

    def edit_patient_condition(self, patient_id, new_info, new_condition): #method to edit patients condition
        iterator = self.patient_records.start #start iterating from the beginning of patient records
        while iterator:
            if iterator.data.id_of_patient == patient_id: #if patient ID matches
                iterator.data.medical_history = new_info #update patients medical history
                iterator.data.condition = new_condition #update patients condition
                print("*Patient condition updated successfully*") #prints the message
                return True
            iterator = iterator.next
        print("Patient with the ID", patient_id, "not found.") #print message if patient is not found
        return False

    def remove_patient(self, patient_id): #method to remove patient from hospital records
        iterator = self.patient_records.start #starts iterating from the beginning
        while iterator:
            if iterator.data.id_of_patient == patient_id: #if patient ID matches
                self.patient_records.rem(iterator.data) #remove patient from records
                self.patients_queue.remove(iterator.data) #remove patient from queue
                return True
            iterator = iterator.next
        return False

    def schedule_appointment(self, patient_id, doctor_id): #method to schedule appointment for a patient with a doctor
        #checks if the patient is already in the queue for this doctor
        for patient in self.doctor_queues[doctor_id]:  #tterates through the queue of patients for the given doctor
            if patient.id_of_patient == patient_id: #if patient is already scheduled with this doctor
                print("Patient already scheduled an appointment with this doctor")
                return False
        iterator = self.patient_records.start #starts iterating through patient records
        while iterator: #loops through patient records
            if iterator.data.id_of_patient == patient_id: #if patient ID matches
                iterator.data.appointment = doctor_id #sets appointment for the patient with the doctor
                self.doctor_queues[doctor_id].append(iterator.data) #adds patient to the doctors queue
                print("*Appointment scheduled successfully*")
                return True
            iterator = iterator.next
        print("Patient doesnt exist in record")
        return False

    def view_available_doctors(self): #method to view the doctors and their specializations
        for doctor in self.doctors: #iterates through the list of doctors
            print(doctor) #prints the doctors info

    def view_appointments(self): #method to view appointments scheduled with each doctor
        for doctor in self.doctors: #goes through the list of doctors
            print("Doctor " + doctor.name + " (" + doctor.specialization + ")") #prints doctors name and specialization
            if self.doctor_queues[doctor.id]: #if doctors queue is not empty
                print("Patients scheduled for appointments:")
                for patient in self.doctor_queues[doctor.id]: #iterate through patients in the doctors queue and then prints the patient
                    print("  Patient ID: " + patient.id_of_patient + ", Name: " + patient.name)
            else: #if its empty
                print("No appointments for this doctor.")
            print()

    def view_prescriptions(self): #method to view prescriptions given by doctors
        while self.prescriptions_stack: #while there are prescriptions in the stack
            prescription = self.prescriptions_stack.pop() #remove the prescription from the stack
            print(prescription) #prints prescriptions

    def search_patient(self, patient_name): #method to search for a patient by name
        iterator = self.patient_records.start #starts iterating through patient records
        while iterator: #loops through patient records
            if iterator.data.name == patient_name: #if patients name matches
                print(iterator.data) #then it prints the patients info
                return
            iterator = iterator.next

    def transfer_patient(self, patient_name, current_doctor_id, new_doctor_id): #method to transfer a patient from one doctor to another
        # Find the patient in the patient records
        iterator = self.patient_records.start #start iterating through patient records
        while iterator: #loops through patient records
            if iterator.data.name == patient_name:  #if patient name matches
                patient = iterator.data #get the patient object
                if patient.appointment == current_doctor_id: #if patient is currently scheduled with the current doctor
                    self.doctor_queues[current_doctor_id].remove(patient) #remove patient from current doctors queue
                    patient.appointment = new_doctor_id #update patients appointment to new doctor
                    self.doctor_queues[new_doctor_id].append(patient) #adds patient to new doctors queue
                    print("Patient", patient_name, "transferred successfully from Dr.", current_doctor_id, "to Dr.",
                          new_doctor_id)
                    return True
                else:  #if patient is not scheduled with the current doctor
                    print("Patient", patient_name, "is not currently scheduled with Dr.", current_doctor_id)
                    return False
            iterator = iterator.next
        print("Patient", patient_name, "not found.") #prints this if patient is not found
        return False

    def prescribe_medication(self): #method to prescribe medication to patients
        #gets the info
        patient_name = input("Patient Name = ")
        patient_id = input("Patient Id = ")
        doctor_name = input("Doctors name = ")
        medication_name = input("Medication name = ")
        store_name = input("Store from where you bought the medication = ")
        dose = input("Dose of Capsule = ")
        how_to_take = input("Instructions for the medication = ")

        # Find the patient in the patient records
        iterator = self.patient_records.start #start going through patient records
        while iterator: #loops
            if iterator.data.name == patient_name and iterator.data.id_of_patient == patient_id: #if patient name and ID match
                prescription = Prescription(patient_name, medication_name, store_name, dose, how_to_take, doctor_name) #creates prescription object
                iterator.data.prescriptions.append(prescription) #add prescription to patient's record
                self.prescriptions_stack.append(prescription) #add prescription to stack
                print("*Prescription added successfully*")
                for doctor_id, queue in self.doctor_queues.items(): #goes through doctor queues
                    if iterator.data in queue: #if patient is in a doctors queue
                        queue.remove(iterator.data) #remove patient from the queue
                return True
            iterator = iterator.next
        print("Patient not found in the records.")
        return False

    def patient_summary(self, patient_id): #summary of the patient
        found_patient = None #initializes found_patient to None
        iterator = self.patient_records.start #starts iterating through patient records
        while iterator: #loops through patient records
            if iterator.data.id_of_patient == patient_id: #if patient ID matches
                found_patient = iterator.data #set found_patient to the patient data
                break #exits loop
            iterator = iterator.next #moves to the next node

        if found_patient: #if the patient is found
            print("Patient Summary:")
            print("ID:", found_patient.id_of_patient)
            print("Name:", found_patient.name)
            print("Age:", found_patient.age)
            print("Medical History:", found_patient.medical_history)
            print("Condition:", found_patient.condition)
            print("Date of Admission:", found_patient.date_of_Admission)
            print()

            #Shows prescriptions
            if found_patient.prescriptions: #if patient has prescriptions
                print("Prescriptions:")
                for prescription in found_patient.prescriptions: #loops through prescriptions
                    print("  Medication:", prescription.medication_name)
                    print("  Store:", prescription.store_name)
                    print("  Dose:", prescription.dose)
                    print("  How to take:", prescription.how_to_take)
                    print("  Doctor:", prescription.doctor_name)
                    print()
            else:
                print("No prescriptions available")
            print()

            #Shows appointment history
            if found_patient.appointment: #if patient has an appointment
                print("Appointment History:")
                print("Doctor ID:", found_patient.appointment)
                doctor_name = None
                for doctor in self.doctors: #loops through doctors to find the doctors name
                    if doctor.id == found_patient.appointment:
                        doctor_name = doctor.name
                        break

                if doctor_name:
                    print("Doctor Name:", doctor_name)
                else:
                    print("Doctor Name: Not found")
                if self.doctor_queues[found_patient.appointment]:
                    print("Previous Queue: Patients scheduled for appointments")
                else:
                    print("Previous Queue: No appointments scheduled for this doctor")
            else:
                print("No appointment history available.")
        else:
            print("Patient not found.") #if the patient is not found


def main():
    hospital = Hospital()

    while True: #loops until break
        print()
        print("Menu:")
        print("1. Manager")
        print("2. Doctor")
        print("3. Summary of Patient")
        print("4. Finish")

        choice = input("Enter your choice: ") #takes user input for choice

        if choice == '1': # If choice is Manager
            print()
            print()
            print("Manager Menu:")
            print("a. Entry of Patient")
            print("b. Edit Patient")
            print("c. Remove Patient")
            print("d. View Patients Record")
            print("e. View Available Doctors")
            print("f. Appointment Schedule")
            print("g. View Appointments")
            print("h. View Prescriptions")
            print("i. Finish")

            manager_choice = input("Enter your choice: ") #takes user input
            print()

            if manager_choice == 'a': #if manager choice is to enter a patient
                #takes input for patient details
                id_of_patient = input("Patient ID = ")
                name = input("Patient name = ")
                age = input("Patient age = ")
                medical_history = input("Patient medical history = ")
                condition = input("Patient condition = ")
                date_of_Admission = input("Patient date of admission = ")
                patient = Patient(id_of_patient, name, age, medical_history, condition, date_of_Admission)
                hospital.add_patient(patient)
                print()
                print("*Entry successful*")

            if manager_choice == 'b': #if manager choice is to edit a patients details
                id_of_patient = input("Edit patient ID = ")  #takes input for patient ID to edit
                found = False
                iterator = hospital.patient_records.start
                while iterator:
                    if iterator.data.id_of_patient == id_of_patient:
                        found = True
                        break
                    iterator = iterator.next

                if found: #if patient ID is found
                    #takes input for new patient details
                    name = input("Edit patient name = ")
                    age = input("Edit patient age = ")
                    medical_history = input("Edit patient medical history = ")
                    condition = input("Edit patient condition = ")
                    date_of_Admission = input("Enter patient date of admission = ")
                    print()
                    if hospital.edit_patient(id_of_patient, name, age, medical_history, condition, date_of_Admission):
                        print("*Edit successful*")
                    else:
                        print("Failed to edit patient.")
                else:
                    print("Input ID is not in our system.")


            elif manager_choice == 'c': #if manager choice is to remove a patient
                patient_id = input("Patient ID to remove = ") #takes input for patient ID to remove
                if hospital.remove_patient(patient_id):
                    print("*Removed successfully*")
                else:
                    print("Provided id not found.")

            elif manager_choice == 'd': #if manager choice is to view patient records
                print("Patient Records:-")
                iterator = hospital.patient_records.start
                while iterator:
                    print(iterator.data)
                    iterator = iterator.next

            elif manager_choice == 'e': #if manager choice is to view available doctors
                print("Available Doctors:")
                hospital.view_available_doctors()

            elif manager_choice == 'f': #if manager choice is to schedule an appointment
                print("Available Doctors:")
                hospital.view_available_doctors()
                print()
                print("Patient Records:-")
                iterator = hospital.patient_records.start
                while iterator:
                    print(iterator.data)
                    iterator = iterator.next
                patient_id = input("Patient ID = ")
                doctor_id = input("Doctor ID =")
                patient_found = False
                doctor_found = False
                patient_iterator = hospital.patient_records.start
                doctor_iterator = None
                while patient_iterator:
                    if patient_iterator.data.id_of_patient == patient_id:
                        patient_found = True
                        break
                    patient_iterator = patient_iterator.next

                for doctor in hospital.doctors:
                    if doctor.id == doctor_id:
                        doctor_found = True
                        doctor_iterator = doctor
                        break

                if patient_found and doctor_found:
                    hospital.schedule_appointment(patient_iterator.data.id_of_patient, doctor_iterator.id)
                else:
                    print("Please make sure both are present")

            elif manager_choice == 'g': #if manager choice is to view appointments
                print("Appointments:")
                hospital.view_appointments()

            elif manager_choice == 'h':  #if manager choice is to view prescriptions
                print("Prescriptions:")
                hospital.view_prescriptions()

            elif manager_choice == 'i':
                continue

        elif choice == '2': #if choice is Doctor
            print()
            print()
            print("Doctor Menu:")
            print("a. View Patient Record")
            print("b. Edit Record")
            print("c. Transfer Patient")
            print("d. Prescribed Prescription")
            print("e. Finish")

            doctor_choice = input("Enter your choice: ")

            if doctor_choice == 'a':  #if doctor choice is to view a patients record
                patient_name = input("Patient Name = ")
                hospital.search_patient(patient_name)

            elif doctor_choice == 'b': #if doctor choice is to edit a patients record
                patient_id = input("Patient id = ")
                new_info = input("Edit Medical history = ")
                new_condition = input("Edit Condition = ")
                hospital.edit_patient_condition(patient_id, new_info, new_condition)

            elif doctor_choice == 'c': #if doctor choice is to transfer a patient
                patient_name = input("Patient name = ")
                current_doctor_id = input("Current Doctor ID = ")
                new_doctor_id = input("New Doctor ID = ")
                hospital.transfer_patient(patient_name, current_doctor_id, new_doctor_id)

            elif doctor_choice == 'd': #if doctor choice is to prescribe medication
                hospital.prescribe_medication()

            elif doctor_choice == 'e': #if doctor choice is to finish
                continue

        elif choice == '3':  #if the choice is to view a summary of a patient
            print()
            print("Summary of Patient Including All Details:")
            patient_id = input("Patient ID =")
            hospital.patient_summary(patient_id)
            print()

        elif choice == '4': #if the choice is to finish
            print()
            print()
            print("Done!")
            break

        else:
            print("Error")


if __name__ == "__main__":
    main() #calls the main function
