#Part A
class BSTNode: #class for a node in a binary search tree (BST)
    def __init__(self, datetime_value, post): #constructor to initialize node with datetime value and post content
        self.datetime_value = datetime_value
        self.post = post
        self.left = None
        self.right = None

class BinarySearchTree: #BST class
    def __init__(self):
        self.root = None #empty root

    def insert(self, datetime_value, post):  #method to insert a node into the BST
        if not self.root: #If the tree is empty set the new node to root
            self.root = BSTNode(datetime_value, post)
        else: #else add the node in tree
            self._insert_recursive(self.root, datetime_value, post)

    def _insert_recursive(self, node, datetime_value, post): #method to insert a node recursively
        if datetime_value < node.datetime_value: #condition to check datetime value less than node value
            if not node.left: #if the left child of the current node is None then insert the new node as the left child
                node.left = BSTNode(datetime_value, post)
            else: #if the left child exists, recursively call _insert_recursive on the left child
                self._insert_recursive(node.left, datetime_value, post)
        else:  #if the datetime value is greater than or equal to the current node's datetime value
            if not node.right: #if the right child of the current node is None then insert the new node as the right child
                node.right = BSTNode(datetime_value, post)
            else: #if the right child exists then recursively call _insert_recursive on the right child
                self._insert_recursive(node.right, datetime_value, post)
